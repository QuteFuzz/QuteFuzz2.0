equal_prob

/*
    (I could not find any official Grammar documentation for Qiskit this is made up)
*/

<Statement> ::= ( <Gate> | <Barrier> | <Measurement> | <ControlFlow> ) "\n";
<Init> ::= ("qc = QuantumCircuit(" <QubitCount> ("," <ClbitCount>)? ")") "\n";
<CircuitName> ::= "circuit";

<Circuit> ::= (<Init>) (<Statement>)*;

<QubitCount> ::= <Integer>;
<ClbitCount> ::= <Integer>;

<Gate> ::= <CircuitName> "." <GateName> "(" <QubitList> ")";
<GateName> ::= "h" | "x" | "y" | "z" | "s" | "t" | "cx" | "ccx" | "rx" | "ry" | "rz" | "u" | "swap" ;

<Barrier> ::= "barrier(" <QubitList> ")";

<Measurement> ::= "measure(" <Qubit> ") -> " <Clbit>;

<QubitList> ::= <Qubit> ( "," <Qubit> )*;
<Qubit> ::= "q[" <Integer> "]";
<Clbit> ::= "c[" <Integer> "]";

<ParameterList> ::= <Parameter> ( "," <Parameter> )*;
<Parameter> ::= <Float> | "pi" | <Symbol>;

<ControlFlow> ::= "with " <CircuitName> ".if_test(" <Condition> "):" "\n" <Statement>;
<Condition> ::= "(" <Clbit> "," <Integer> ")";

<Integer> ::= "1" - "10";
<Letter> ::= "a" - "z";
<Symbol> ::= (Letter)*;
<Float> ::= (<Integer>)? "." <Integer>
