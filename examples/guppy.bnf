# Grammar for guppylang: https://github.com/CQCL/guppylang

DECORATOR = "@guppy";

QUBIT_TYPE_ANNOT = "qubit";

imports = "from guppylang.decorator import guppy"
        "from guppylang.std.angles import angle, pi"
        "from guppylang.std.builtins import array, owned, py"
        "from guppylang.std.option import Option, nothing, some"
        "from guppylang.std.quantum import ("
            "cz,"
            "discard,"
            "h,"
            "measure,"
            "qubit,"
            "ry,"
            "rz"
        ")";

program = imports NEWLINE subroutines NEWLINE block NEWLINE compiler_call;

subroutines = (block NEWLINE)*;

compiler_call = main_circuit_name ".measure_all() " NEWLINE
                "pt = pytketTesting() " NEWLINE
                "pt.run_circ(" main_circuit_name ", " circuit_id ")" NEWLINE;

block     = block_def NEWLINE body NEWLINE;

block_def = DECORATOR NEWLINE "def " circuit_name "(" qubit_defs "):";

qubit_defs = (qubit_def)+;

body = (statement NEWLINE)+ return_statement;

qubit_def = qubit_def_singular | qubit_def_register;

qubit_def_singular = qubit_name " : " QUBIT_TYPE_ANNOT;

qubit_def_register = qreg_name " : array[" QUBIT_TYPE_ANNOT ", " qreg_size "]";

qubit = singular_qubit_apply | register_qubit_apply;

singular_qubit_apply = qubit_name;

register_qubit_apply = qubit_name "[" qubit_index "]"; 

statement   = gate_application;

return_statement = "return";

gate_application = 
    ;

gate_name   = X | Y | Z | H | CX | CCX | Rz | Rx | Ry | U1 | U2 | U3;

gate_application_kind = 
    ;

qubit_list  = qubit (COMMA SPACE qubit)*;

float_literals = 
    float_literal 
    | float_literal COMMA float_literal 
    | float_literal COMMA float_literal COMMA float_literal
    ;

