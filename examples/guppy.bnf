# guppy

program     = imports NEWLINE subroutines NEWLINE block NEWLINE compiler_call;

DECORATOR = "@guppy";

QUBIT_TYPE_ANNOT = "qubit";

imports = "from guppylang.decorator import guppy" NEWLINE
        "from guppylang.std.angles import angle, pi" NEWLINE
        "from guppylang.std.builtins import array, owned, py" NEWLINE
        "from guppylang.std.option import Option, nothing, some" NEWLINE
        "from guppylang.std.quantum import ("
            "cz,"
            "discard,"
            "h,"
            "measure,"
            "qubit,"
            "ry,"
            "rz"
        ")" NEWLINE;

subroutines = (block NEWLINE)*;

block       = block_def NEWLINE body NEWLINE;

body        = internal_qubit_defs (statement NEWLINE)+ return_statement;

block_def   = "@guppy" NEWLINE "def " circuit_name LPAREN block_args RPAREN " -> None" type COLON
            | "@guppy.comptime" NEWLINE "def " circuit_name LPAREN block_args RPAREN " -> None" type COLON
            ;

block_args  = external_qubit_defs; # TODO: Add additional traditional parameters in future

external_qubit_defs =   (external_qubit_def)+;

internal_qubit_defs =   (internal_qubit_def NEWLINE)+;

external_qubit_def  =   external_qubit_def_singular 
                        | external_qubit_def_register;

external_qubit_def_singular = qubit_name COLON "qubit";
external_qubit_def_register = qreg_name COLON "array" LBRACK "qubit" COMMA qreg_size RBRACK;

internal_qubit_def = internal_qubit_def_singular
                    | internal_qubit_def_register;

internal_qubit_def_singular = qubit_name EQUALS "qubit" LPAREN RPAREN;
internal_qubit_def_register = qreg_name EQUALS "array" LPAREN "qubit" COMMA qreg_size RPAREN;

statement   = gate_application;

return_statement = "return";

gate_application = gate_name gate_application_kind;

gate_application_kind = 
    LPAREN qubit_list RPAREN 
    | LPAREN float_literals COMMA qubit_list RPAREN
    ;

float_literals = float_literal 
                | float_literal COMMA float_literal 
                | float_literal COMMA float_literal COMMA float_literal;

gate_name = 
    x | y | z | h | cx | toffoli | rz | rx | ry
    # | t | tdg | s | sdg | ch | crz | measure | measure_array
    # | reset | project_z
    ;

qubit_list  = qubit (COMMA SPACE qubit)*;

qubit       = singular_qubit_apply | register_qubit_apply;

singular_qubit_apply = qubit_name;

register_qubit_apply = qubit_name "[" qubit_index "]"; 

imports = "from guppylang.decorator import guppy "
        "from guppylang.std.angles import angle, pi "
        "from guppylang.std.builtins import array, owned, py, comptime, result, owned "
        "from guppylang.std.quantum import * "
        "from selene_sim import build, Stim "
        "from diff_testing.lib import guppyTesting "
        "from pathlib import Path ";

compiler_call = main_circuit_name ".measure_all() " NEWLINE
                "pt = pytketTesting() " NEWLINE
                "pt.run_circ(" main_circuit_name ", " circuit_id ")" NEWLINE;

block_def = DECORATOR NEWLINE "def " circuit_name "(" external_qubit_definitions "):";

external_qubit_definitions = qubit_def (COMMA qubit_def)*;

qubit_def = singular_qubit_def | register_qubit_def;

singular_qubit_def = qubit_name " : " QUBIT_TYPE_ANNOT;

register_qubit_def = qreg_name " : array[" QUBIT_TYPE_ANNOT ", " qreg_size "]";

body = internal_qubit_definitions statements;

statements = (statement NEWLINE)+ return_statement;

qubit = register_qubit | singular_qubit;

register_qubit = qubit_name "[" qubit_index "]";

singular_qubit = qubit_name;

statement = qubit_op;

qubit_op =
    gate_op
    | subroutine_op
    ;

gate_op = gate_name gate_op_kind;

gate_name   = X | Y | Z | CX | CY | CZ;

gate_op_kind =
    LPAREN qubit_list RPAREN 
    | LPAREN float_list COMMA qubit_list RPAREN
    ;

qubit_list  = qubit (COMMA SPACE qubit)*;

qubit = singular_qubit | register_qubit;

singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]"; 

float_list = float_literal (COMMA float_literal)*;