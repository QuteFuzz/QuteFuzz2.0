# trying to fix up a pytket grammar that could be used

(*
    tokens like NEWLINE and RPAREN are defined in the tokens.bnf file
*)

(*
    Rule = collection branch
    Branch = collection term
    Term = variant<Rule, std::string>

*)

program = imports NEWLINE subroutines NEWLINE block NEWLINE compiler_call;

subroutines = (block NEWLINE circuit_name " = CircBox(" circuit_name ")" NEWLINE)*;

block     = block_def NEWLINE qubit_defs_external NEWLINE body NEWLINE;

block_def = circuit_name " = Circuit()";

qubit_defs_external = (qubit_def_external NEWLINE)+;

body = statements;

statements = (statement NEWLINE)+;

qubit_def_external  = singular_qubit_def_external 
                    | register_qubit_def_external;

register_qubit_def_external =  qreg_name EQUALS circuit_name ".add_q_register" LPAREN '"' qreg_name '",' qreg_size RPAREN;

statement = qubit_op;

qubit_op =
    gate_op
    | subroutine_op
    ;

gate_op = circuit_name DOT gate_name gate_op_kind;
subroutine_op = circuit_name ".add_gate(" subroutine ",[" qubit_list "])";

gate_name   = X | Y | Z | CX | CY | CZ | Rx;

gate_op_kind =
    LPAREN qubit_list RPAREN 
    | LPAREN float_list COMMA qubit_list RPAREN
    ;

qubit_list  = qubit (COMMA SPACE qubit)*;

float_list = float_literal (COMMA float_literal)*;

qubit = singular_qubit | register_qubit;

singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]"; 

imports = "from sympy import Symbol" NEWLINE
        "from diff_testing.lib import pytketTesting" NEWLINE
        "from pathlib import Path" NEWLINE
        "from pytket import Circuit, Qubit, Bit" NEWLINE
        "from pytket.circuit import Op, OpType, MultiplexorBox, CircBox" NEWLINE;

compiler_call = main_circuit_name ".measure_all() " NEWLINE
                "pt = pytketTesting() " NEWLINE
                "pt.run_circ(" main_circuit_name ", " circuit_id ")" NEWLINE;