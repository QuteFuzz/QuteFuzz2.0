
block = circuit_def_header NEWLINE body NEWLINE;

body = EXTERNAL::qubit_defs EXTERNAL::bit_defs NEWLINE compound_stmts;


EXTERNAL {

qubit_defs = (qubit_def NEWLINE)+;

bit_defs = (bit_def NEWLINE)+;

qubit_def = singular_qubit_def | register_qubit_def;

bit_def = singular_bit_def | register_bit_def;

singular_qubit_def = 
    qubit_def_name ' = Qubit("'  qubit_def_name '",0)' NEWLINE circuit_name ".add_qubit(" qubit_def_name ")";

register_qubit_def = 
    qubit_def_name "=" circuit_name '.add_q_register("' qubit_def_name '",' qreg_size ")";

singular_bit_def = 
    bit_def_name '= Bit("' bit_def_name '", 0)' NEWLINE circuit_name ".add_bit(" bit_def_name ")";

register_bit_def = 
    bit_def_name "=" circuit_name '.add_c_register("' bit_def_name '",' creg_size ")";
}


imports = 
    "from pytket import Circuit, Qubit, Bit" NEWLINE
    "from pytket.circuit import Op, OpType, MultiplexorBox, CircBox" NEWLINE
    swarm_testing_imports NEWLINE
    "from diff_testing.lib import pytketTesting"
    ;


subroutine_def_footer = circuit_name " = CircBox(" circuit_name ")" NEWLINE;

circuit_def_header = circuit_name " = Circuit()";

compound_stmt = qubit_op;


gate_op = circuit_name "." gate_name "(" gate_op_args ")";

subroutine_op = circuit_name ".add_gate(" subroutine ",[" qubit_list "])";

gate_name   = X | Y | Z | CX | CZ | Rx | Ry | Rz | V | Vdg | T | Tdg | Sdg | CY
            | H | T | S | CH | Measure;

condition_value = "condition_value=1"
                | "condition_value=0";


singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]";


singular_bit = bit_name;

register_bit = bit_name "[" bit_index "]";


compiler_call = "pt = pytketTesting() " NEWLINE testing_method;

testing_method = main_circuit_name ".measure_all() " NEWLINE "pt.ks_diff_test(" main_circuit_name COMMA circuit_id RPAREN
                | "pt.run_guppy_pytket_diff(" main_circuit_name COMMA circuit_id COMMA LBRACK qubit_def_list RBRACK COMMA LBRACK bit_def_list RBRACK RPAREN NEWLINE
                ;

qubit_def_list = qubit_def_size (COMMA SPACE qubit_def_size)*;

bit_def_list = bit_def_size (COMMA SPACE bit_def_size)*;