# guppy

program     = imports NEWLINE subroutines NEWLINE block NEWLINE compiler_call;

subroutines = (block NEWLINE)*;

block = non_comptime_block
        | comptime_block;

non_comptime_block = block_def NEWLINE INDENT body discard_internal_qubits simple_stmt DEDENT NEWLINE;
block_def   = "@guppy" NEWLINE "def " circuit_name LPAREN block_args RPAREN " -> None" COLON;

comptime_block = comptime_block_def NEWLINE INDENT body discard_internal_qubits simple_stmt DEDENT NEWLINE;
comptime_block_def =  "@guppy.comptime" NEWLINE "def " circuit_name LPAREN block_args RPAREN " -> None" COLON;

body   = compound_stmts;

compound_stmts = (compound_stmt NEWLINE)*;

block_args  = qubit_defs_external; # TODO: Add additional traditional parameters in future

qubit_defs_external = | qubit_def_external (COMMA qubit_def_external)*;

qubit_defs_internal =   (qubit_def_internal NEWLINE)*;

qubit_def_external  = singular_qubit_def_external
                    | register_qubit_def_external;

singular_qubit_def_external = qubit_def_name COLON "qubit";
register_qubit_def_external = qubit_def_name COLON "array" LBRACK "qubit" COMMA qreg_size RBRACK;

qubit_def_internal = singular_qubit_def_internal
                    | register_qubit_def_internal;

singular_qubit_def_internal = qubit_def_name EQUALS "qubit" LPAREN RPAREN;
register_qubit_def_internal = qubit_def_name EQUALS "array" LPAREN "qubit() for _ in range" LPAREN qreg_size RPAREN RPAREN;

compound_stmt = qubit_op
                ;

qubit_op  = gate_op | subroutine_op; # qubit op defined stricly as a operation that takes qubits and applies a state altering gate onto them, measure moves to gate_name

gate_op = gate_name gate_op_kind;
subroutine_op = gate_name LPAREN arguments RPAREN;

# For function calls, arguments need to match definition (e.g. qubit, array of qubits, etc.) IN ORDER
arguments = arg (COMMA arg)*;

arg = arg_singular_qubit    
    | LBRACK arg_register_qubits RBRACK
    ;

arg_singular_qubit = qubit;
arg_register_qubits = qubit (COMMA SPACE qubit)*;

gate_op_kind =  LPAREN qubit_list RPAREN 
                | LPAREN qubit_list COMMA float_list RPAREN
                ;

float_list = "angle" LPAREN float_literal RPAREN (COMMA "angle" LPAREN float_literal RPAREN)*;

simple_stmt = "return";

discard_internal_qubits = (discard_internal_qubit NEWLINE)*;

discard_internal_qubit = discard_single_qubit
                        | discard_qreg
                        | measure_and_record_single_qubit
                        | measure_and_record_qreg
                        ;

discard_qreg =  "measure_array" LPAREN qubit_def_name RPAREN
                | "discard_array" LPAREN qubit_def_name RPAREN
                ;
discard_single_qubit = "measure" LPAREN qubit_def_name RPAREN
                | "discard" LPAREN qubit_def_name RPAREN
                ;

measure_and_record_qreg =  "result(" DOUBLE_QUOTE qubit_def_name DOUBLE_QUOTE COMMA "measure_array" LPAREN qubit_def_name RPAREN RPAREN;

measure_and_record_single_qubit = "result(" DOUBLE_QUOTE qubit_def_name DOUBLE_QUOTE COMMA "measure" LPAREN qubit_def_name RPAREN RPAREN;

gate_name = x | y | z | h | cx | cy | cz | rz | rx | ry | v | vdg
    | t | tdg | s | sdg | ch | subroutine 
    ;

qubit_list  = qubit (COMMA SPACE qubit)*;

qubit       = singular_qubit | register_qubit;

singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]"; 

imports = "from guppylang.decorator import guppy " NEWLINE
        "from guppylang.std.angles import angle, pi " NEWLINE
        "from guppylang.std.builtins import array, owned, py, comptime, result, owned, barrier" NEWLINE
        "from guppylang.std.quantum import * " NEWLINE
        "from guppylang.std.qsystem import * " NEWLINE
        "from diff_testing.lib import guppyTesting " NEWLINE
        "from pathlib import Path " NEWLINE;

compiler_call = "gt = guppyTesting()" NEWLINE testing_method;

testing_method = "gt.ks_diff_test(main_circuit" COMMA circuit_id RPAREN NEWLINE
                # | "gt.guppy_qir_diff_test(main_circuit" COMMA circuit_id COMMA total_num_qubits RPAREN NEWLINE; # Currently too slow with Nexus
                ;