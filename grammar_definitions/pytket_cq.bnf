# trying to fix up a pytket grammar that could be used

(*
    tokens like NEWLINE and RPAREN are defined in the tokens.bnf file
*)

(*
    Rule = collection branch
    Branch = collection term
    Term = variant<Rule, std::string>

*)

program = imports NEWLINE subroutines NEWLINE block NEWLINE compiler_call;

subroutines = (block NEWLINE circuit_name " = CircBox(" circuit_name ")" NEWLINE)*;

block     = block_def NEWLINE qubit_defs_external_owned NEWLINE body NEWLINE;

block_def = circuit_name " = Circuit()";

main_block_def = block_def;

qubit_defs_external_owned = (qubit_def_external NEWLINE)+;

body = compound_stmts;

compound_stmts = (compound_stmt NEWLINE)+;

qubit_def_external  = singular_qubit_def_external 
                    | register_qubit_def_external;


singular_qubit_def_external = qubit_def_name EQUALS "Qubit" LPAREN DOUBLE_QUOTE qubit_def_name DOUBLE_QUOTE COMMA "0" RPAREN NEWLINE circuit_name ".add_qubit" LPAREN qubit_def_name RPAREN;
register_qubit_def_external =  qubit_def_name EQUALS circuit_name ".add_q_register" LPAREN '"' qubit_def_name '",' qreg_size RPAREN;

compound_stmt = qubit_op;

qubit_op = gate_op | subroutine_op; # qubit op defined stricly as a operation that takes qubits and applies a state altering gate onto them, measure moves to gate_name

gate_op = circuit_name DOT gate_name gate_op_kind;
subroutine_op = circuit_name ".add_circbox(" gate_name ",sum(([x] if not isinstance(x, list) else x for x in [" gate_op_kind "]), []))";

gate_name   = X | Y | Z | CX | CZ | Rx | Ry | Rz | V | Vdg | T | Tdg | Sdg | CY
            | H | T | S | CH | subroutine;

gate_op_kind = LPAREN qubit_list RPAREN
                | LPAREN float_list COMMA qubit_list RPAREN
                | arguments
                ;

arguments = arg (COMMA arg)*;

arg = arg_singular_qubit    
    | LBRACK  arg_register_qubits RBRACK
    ;

arg_singular_qubit = qubit;
arg_register_qubits = qubit (COMMA SPACE qubit)*;

condition_value = "condition_value=1"
                | "condition_value=0";

qubit_list  = qubit (COMMA SPACE qubit)*;

float_list = "angle" LPAREN float_literal RPAREN (COMMA "angle" LPAREN float_literal RPAREN)*;

qubit = singular_qubit | register_qubit;

singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]";

imports =   "from pytket import Circuit, Qubit, Bit" NEWLINE
            "from pytket.circuit import Op, OpType, MultiplexorBox, CircBox" NEWLINE
            "def angle(float): return float" NEWLINE
            swarm_testing_imports NEWLINE
            "from diff_testing.lib import pytketTesting"
            ;

compiler_call = "def run_test(qss_main_circuit):" NEWLINE "    pt = pytketTesting() " NEWLINE testing_method;

testing_method = "    " main_circuit_name ".measure_all() " NEWLINE "    pt.cross_qss_ks_diff_test(" main_circuit_name COMMA "qss_" main_circuit_name COMMA circuit_id COMMA LBRACK qubit_def_list RBRACK RPAREN NEWLINE
                "if __name__ == '__main__':" NEWLINE "    from circuit_cross_qss import main_circuit as qss_main_circuit" NEWLINE "    run_test(qss_main_circuit)"
                ;

qubit_def_list = qubit_def_size (COMMA SPACE qubit_def_size)*;
