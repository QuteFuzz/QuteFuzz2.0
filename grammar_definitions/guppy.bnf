# guppy

program     = imports NEWLINE subroutines NEWLINE main_block NEWLINE compiler_call;

subroutines = (block NEWLINE)*;

# A main block in guppy is a special case, where it cannot contain external qubit defs or any qubits, but could contain regular inputs?
main_block = main_block_def NEWLINE INDENT body discard_internal_qubits simple_stmt DEDENT NEWLINE;
main_block_def = decorators NEWLINE "def " circuit_name LPAREN RPAREN " -> None" COLON;

block       = block_def NEWLINE INDENT body discard_internal_qubits simple_stmt DEDENT NEWLINE;

body   = qubit_defs_internal compound_stmts;

compound_stmts = (compound_stmt NEWLINE)*;

block_def   = decorators NEWLINE "def " circuit_name LPAREN block_args RPAREN " -> None" type COLON;

decorators = "@guppy"
            # | "@guppy.comptime"
            ;

block_args  = qubit_defs_external; # TODO: Add additional traditional parameters in future

qubit_defs_external = | qubit_def_external (COMMA qubit_def_external)*;

qubit_defs_internal = (qubit_def_internal NEWLINE)*; # 0 or more since there could be 0 internal qubit definitions

qubit_def_external  = singular_qubit_def_external 
                    | register_qubit_def_external;

singular_qubit_def_external = qreg_name COLON "qubit";
register_qubit_def_external = qreg_name COLON "array" LBRACK "qubit" COMMA qreg_size RBRACK;

qubit_def_internal = singular_qubit_def_internal
                    | register_qubit_def_internal;

singular_qubit_def_internal = qreg_name EQUALS "qubit" LPAREN RPAREN;
register_qubit_def_internal = qreg_name EQUALS "array" LPAREN "qubit() for _ in range" LPAREN qreg_size RPAREN RPAREN;
# register_qubit_def_internal = qreg_name EQUALS LBRACK "qubit() for _ in range" LPAREN qreg_size RPAREN RBRACK;    # For comptime only

compound_stmt = qubit_op ;
                # | if_stmt;

if_stmt =
    'if' expression ':' NEWLINE INDENT compound_stmts DEDENT elif_stmt
    | 'if' expression ':' NEWLINE INDENT compound_stmts DEDENT (else_stmt)?;
elif_stmt =
    'elif' expression ':' NEWLINE INDENT compound_stmts DEDENT elif_stmt
    | 'elif' expression ':' NEWLINE INDENT compound_stmts DEDENT (else_stmt)?;
else_stmt =
    'else' ':' NEWLINE INDENT compound_stmts DEDENT;

(*
    The expressions below are from https://docs.python.org/3/reference/grammar.html
    Bits have been commented out / removed / modified to remove unnecessary complexity
*)

# EXPRESSIONS
# -----------

expression =
    disjunction;

disjunction =
    conjunction ('or' conjunction )+
    | conjunction;

conjunction =
    inversion ('and' inversion )+ 
    | inversion;

inversion =
    comparison;

# Comparison operators
# --------------------

comparison = 
    bitwise_or compare_op_bitwise_or_pair;

compare_op_bitwise_or_pair =
    eq_bitwise_or
    | noteq_bitwise_or
    | lte_bitwise_or
    | lt_bitwise_or
    | gte_bitwise_or
    | gt_bitwise_or;

eq_bitwise_or: '==' bitwise_or;
noteq_bitwise_or: '!=' bitwise_or; 
lte_bitwise_or: '<=' bitwise_or;
lt_bitwise_or: '<' bitwise_or ;
gte_bitwise_or: '>=' bitwise_or; 
gt_bitwise_or: '>' bitwise_or ;


# Bitwise operators
# -----------------

bitwise_or:
    # | bitwise_or '|' bitwise_xor 
    bitwise_xor;

bitwise_xor:
    # | bitwise_xor '^' bitwise_and 
    bitwise_and;

bitwise_and:
    # | bitwise_and '&' shift_expr 
    shift_expr;

shift_expr:
    # | shift_expr '<<' primary 
    # | shift_expr '>>' primary
    primary;


# Primary elements
# ----------------

primary:
    atom;

atom:
    NUMBER
    | 'True' 
    | 'False';

qubit_op  = gate_op
            | subroutine_op;

gate_op = gate_name gate_op_kind;
subroutine_op = subroutine LPAREN qubit_list RPAREN;

gate_op_kind =  LPAREN qubit_list RPAREN 
                | LPAREN qubit_list COMMA float_list RPAREN
                ;

float_list = "angle" LPAREN float_literal RPAREN (COMMA "angle" LPAREN float_literal RPAREN)*;

simple_stmt = "return";

discard_internal_qubits = (discard_internal_qubit NEWLINE)*;

discard_internal_qubit = discard_single_qubit
                        | discard_qreg;

discard_qreg = "discard_array" LPAREN qreg_name RPAREN;
discard_single_qubit = "discard" LPAREN qreg_name RPAREN;

gate_name = 
    x | y | z | h | cx | toffoli | rz | rx | ry
    # | t | tdg | s | sdg | ch | crz 
    # | measure | measure_array | reset | project_z
    ;

qubit_list  = qubit (COMMA SPACE qubit)*;

qubit       = singular_qubit | register_qubit;

singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]"; 

imports = "from guppylang.decorator import guppy " NEWLINE
        "from guppylang.std.angles import angle, pi " NEWLINE
        "from guppylang.std.builtins import array, owned, py, comptime, result, owned " NEWLINE
        "from guppylang.std.quantum import * " NEWLINE
        "from diff_testing.lib import guppyTesting " NEWLINE
        "from pathlib import Path " NEWLINE;

compiler_call = "guppyTesting.run_circ(main_circuit)" NEWLINE;
