# guppy

program     = imports NEWLINE subroutines NEWLINE block NEWLINE compiler_call;

subroutines = (block NEWLINE)*;

block       = block_def NEWLINE INDENT body discard_internal_qubits simple_stmt DEDENT NEWLINE;

body   = qubit_defs_internal compound_stmts ;

compound_stmts = (compound_stmt NEWLINE)*;

block_def   = "@guppy" NEWLINE "def " circuit_name LPAREN block_args RPAREN " -> None" type COLON
            | "@guppy.comptime" NEWLINE "def " circuit_name LPAREN block_args RPAREN " -> None" type COLON
            ;

block_args  = qubit_defs_external; # TODO: Add additional traditional parameters in future

qubit_defs_external = EMPTY | qubit_def_external (COMMA qubit_def_external)*;

qubit_defs_internal =   (qubit_def_internal NEWLINE)*; # 0 or more since there could be 0 internal qubit definitions

qubit_def_external  = singular_qubit_def_external 
                    | register_qubit_def_external;

singular_qubit_def_external = qubit_name COLON "qubit";
register_qubit_def_external = qreg_name COLON "array" LBRACK "qubit" COMMA qreg_size RBRACK;

qubit_def_internal = singular_qubit_def_internal
                    | register_qubit_def_internal;

singular_qubit_def_internal = qubit_name EQUALS "qubit" LPAREN RPAREN;
register_qubit_def_internal = qreg_name EQUALS "array" LPAREN "qubit() for _ in range" LPAREN qreg_size RPAREN RPAREN;

compound_stmt = qubit_op;

qubit_op  = gate_op
            | subroutine_op;

gate_op = gate_name gate_op_kind;
subroutine_op = subroutine LPAREN qubit_list RPAREN;

gate_op_kind =  LPAREN qubit_list RPAREN 
                | LPAREN qubit_list COMMA float_list RPAREN
                ;

float_list = "angle" LPAREN float_literal RPAREN (COMMA "angle" LPAREN float_literal RPAREN)*;

simple_stmt = "return"
            | "pass";

discard_internal_qubits = (discard_internal_qubit NEWLINE)*;

discard_internal_qubit = discard_single_qubit
                        | discard_qreg;

discard_qreg = "discard_array" LPAREN qreg_name RPAREN;
discard_single_qubit = "discard" LPAREN qubit_name RPAREN;

gate_name = 
    x | y | z | h | cx | toffoli | rz | rx | ry
    # | t | tdg | s | sdg | ch | crz 
    # | measure | measure_array | reset | project_z
    ;

qubit_list  = qubit (COMMA SPACE qubit)*;

qubit       = singular_qubit | register_qubit;

singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]"; 

imports = "from guppylang.decorator import guppy " NEWLINE
        "from guppylang.std.angles import angle, pi " NEWLINE
        "from guppylang.std.builtins import array, owned, py, comptime, result, owned " NEWLINE
        "from guppylang.std.quantum import * " NEWLINE
        "from diff_testing.lib import guppyTesting " NEWLINE
        "from pathlib import Path " NEWLINE;

compiler_call = "hugr = guppy.compile(main_circuit)" NEWLINE;
