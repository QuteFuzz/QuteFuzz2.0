# guppy

INTERNAL {

qubit_defs = (qubit_def NEWLINE)*; # override

qubit_def = singular_qubit_def | register_qubit_def;

singular_qubit_def = qubit_def_name "= qubit()";

register_qubit_def = qubit_def_name "=array(qubit() for _ in range(" qreg_size "))";
}

EXTERNAL {

qubit_defs = qubit_def (COMMA qubit_def)*; # override

qubit_def = singular_qubit_def | register_qubit_def;

singular_qubit_def = qubit_def_name COLON "qubit";

register_qubit_def = qubit_def_name ":array[qubit, " qreg_size "]";

}

comptime_decorator = "@guppy.comptime";

guppy_decorator = "@guppy";

decorator = comptime_decorator | guppy_decorator;



circuit_def = circuit_def_header NEWLINE INDENT body "return" DEDENT NEWLINE; # override

circuit_def_header->program = "@guppy.comptime" NEWLINE "def " circuit_name "() -> None:";

circuit_def_header->subroutine_defs = decorator NEWLINE "def " circuit_name "(" EXTERNAL::qubit_defs "):";


body   = INTERNAL::qubit_defs NEWLINE compound_stmts;  # override


float_list = "angle(" float_literal ")" (", angle(" float_literal ")")*; # override

# TODO: think about how discard stuff should be added
# -----------------------------------------------------------------------------------------

discard_internal_qubits = (discard_internal_qubit NEWLINE)*;

discard_internal_qubit = discard_single_qubit
                        | discard_qreg
                        | measure_and_record_single_qubit
                        | measure_and_record_qreg
                        ;

discard_qreg =  "measure_array" LPAREN qubit_def_name RPAREN
                | "discard_array" LPAREN qubit_def_name RPAREN
                ;
discard_single_qubit = "measure" LPAREN qubit_def_name RPAREN
                | "discard" LPAREN qubit_def_name RPAREN
                ;

measure_and_record_qreg =  "result(" DOUBLE_QUOTE qubit_def_name DOUBLE_QUOTE COMMA "measure_array" LPAREN qubit_def_name RPAREN RPAREN;

measure_and_record_single_qubit = "result(" DOUBLE_QUOTE qubit_def_name DOUBLE_QUOTE COMMA "measure" LPAREN qubit_def_name RPAREN RPAREN;

# -----------------------------------------------------------------------------------------

gate_op = gate_name "(" arguments ")";

subroutine_op = gate_name "(" arguments ")";

gate_name = x | y | z | h | cx | cy | cz | toffoli | rz | rx | ry | v | vdg
    | t | tdg | s | sdg | ch | crz | project_z | measure_and_reset | subroutine
    ;

singular_qubit = qubit_name;

register_qubit = qubit_name "[" qubit_index "]"; 


imports = "from guppylang.decorator import guppy " NEWLINE
        "from guppylang.std.angles import angle, pi " NEWLINE
        "from guppylang.std.builtins import array, owned, py, comptime, result, owned, barrier" NEWLINE
        "from guppylang.std.quantum import * " NEWLINE
        "from guppylang.std.qsystem import * " NEWLINE
        "from diff_testing.lib import guppyTesting " NEWLINE
        "from pathlib import Path " NEWLINE;

compiler_call = "gt = guppyTesting()" NEWLINE testing_method;

testing_method = "gt.ks_diff_test(main_circuit" COMMA circuit_id RPAREN NEWLINE;